#include <gtest/gtest.h>
#include "AES_CPP/key.hpp"
#include "AES_CPP/keyException.hpp"

using namespace AES_CPP;

/*---------------length test---------------*/
TEST(KeyTest, ValidKeyLength128) {
    EXPECT_NO_THROW(Key("9f3c7e1a54b82d6e0c1f4a9b3d6e7c1f")); // 16 * 8 = 128
}

TEST(KeyTest, ValidKeyLength192) {
    EXPECT_NO_THROW(Key("a1f3d7c9246e8b1f9d3c7a4e1b2d6f93c5a718bf2c4e9d17")); // 24 * 8 = 192
}

TEST(KeyTest, ValidKeyLength256) {
    EXPECT_NO_THROW(Key("6b9e2d7f1c4a8b7e3f1d6c9a2e7b5d1c8a4f9e7d2b3c6a1f0d7c8b2a9e4f6c30")); // 32 * 8 = 256
}

TEST(KeyTest, InvalidKeyLength) {
    EXPECT_THROW(Key("short"), KeyException); // 5 * 8 = 40
}

/*---------------format test---------------*/

TEST(KeyTest, InvalidKeyFormat) {
    EXPECT_THROW(Key("9f3c7e1a54b82d6e0c1f4a9b3d6e7c1q"), KeyException); // ends with a 'q' wich is not hexadicmal caracter
}

TEST(KeyTest, HexToBytes) {
    EXPECT_EQ(Key::hexPairToByte('0', '0') , 0x00);      // 0
    EXPECT_EQ(Key::hexPairToByte('F', 'F') , 0xFF);      // 255
    EXPECT_EQ(Key::hexPairToByte('a', '0') , 0xA0);      // minuscule high nibble
    EXPECT_EQ(Key::hexPairToByte('0', 'b') , 0x0B);      // minuscule low nibble
    EXPECT_EQ(Key::hexPairToByte('C', '4') , 0xC4);      // majuscules et chiffres
    EXPECT_EQ(Key::hexPairToByte('9', 'f') , 0x9F);      // mixte chiffre + lettre min
    EXPECT_EQ(Key::hexPairToByte('d', 'E') , 0xDE);      // mixte minuscule + majuscule
    EXPECT_EQ(Key::hexPairToByte('7', '7') , 0x77);      // double chiffre identique
    EXPECT_EQ(Key::hexPairToByte('A', 'a') , 0xAA);      // mixte case haute/basse
    EXPECT_EQ(Key::hexPairToByte('5', 'c') , 0x5C);      // cas courant mi-haut
}

TEST(KeyTest, HexKeyIsParsedCorrectly128) {
    std::string hexKey = "00112233445566778899aabbccddeeff"; // 128 bits
    Key key(hexKey);

    std::vector<uint8_t> expected = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };

    EXPECT_EQ(key.getKey(), expected);
}

TEST(KeyTest, HexKeyIsParsedCorrectly192) {
    std::string hexKey = "00112233445566778899aabbccddeeff1122334455667788"; // 192 bits
    Key key(hexKey);

    std::vector<uint8_t> expected = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff,
        0x11, 0x22, 0x33, 0x44,
        0x55, 0x66, 0x77, 0x88
    };


    EXPECT_EQ(key.getKey(), expected);
}

TEST(KeyTest, HexKeyIsParsedCorrectly256) {
    std::string hexKey = "00112233445566778899aabbccddeeff112233445566778899aabbccddeeff00"; // 256 bits
    Key key(hexKey);

    std::vector<uint8_t> expected = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff,
        0x11, 0x22, 0x33, 0x44,
        0x55, 0x66, 0x77, 0x88,
        0x99, 0xaa, 0xbb, 0xcc,
        0xdd, 0xee, 0xff, 0x00
    };


    EXPECT_EQ(key.getKey(), expected);
}

/*---------------split test---------------*/


TEST(KeyTest, KeyIsSplitCorrectly128) {
    std::string hexKey = "00112233445566778899aabbccddeeff"; // 128 bits
    Key key(hexKey);
    key.splitKey();

    std::vector<std::array<uint8_t,4>> words_expected = {
        {0x00, 0x11, 0x22, 0x33},
        {0x44, 0x55, 0x66, 0x77},
        {0x88, 0x99, 0xaa, 0xbb},
        {0xcc, 0xdd, 0xee, 0xff}
    };

    EXPECT_EQ(key.getWords(), words_expected);
}

TEST(KeyTest, KeyIsSplitCorrectly192) {
    std::string hexKey = "00112233445566778899aabbccddeeff1122334455667788"; // 192 bits
    Key key(hexKey);
    key.splitKey();

    std::vector<std::array<uint8_t,4>> words_expected = {
        {0x00, 0x11, 0x22, 0x33},
        {0x44, 0x55, 0x66, 0x77},
        {0x88, 0x99, 0xaa, 0xbb},
        {0xcc, 0xdd, 0xee, 0xff},
        {0x11, 0x22, 0x33, 0x44},
        {0x55, 0x66, 0x77, 0x88}
    };


    EXPECT_EQ(key.getWords(), words_expected);
}

TEST(KeyTest, KeyIsSplitCorrectly256) {
    std::string hexKey = "00112233445566778899aabbccddeeff112233445566778899aabbccddeeff00"; // 256 bits
    Key key(hexKey);
    key.splitKey();

    std::vector<std::array<uint8_t,4>> words_expected = {
        {0x00, 0x11, 0x22, 0x33},
        {0x44, 0x55, 0x66, 0x77},
        {0x88, 0x99, 0xaa, 0xbb},
        {0xcc, 0xdd, 0xee, 0xff},
        {0x11, 0x22, 0x33, 0x44},
        {0x55, 0x66, 0x77, 0x88},
        {0x99, 0xaa, 0xbb, 0xcc},
        {0xdd, 0xee, 0xff, 0x00}
    };


    EXPECT_EQ(key.getWords(), words_expected);
}

/*---------------rotword test---------------*/

TEST(KeyTest, RotWordTest) {

    std::array<uint8_t,4> word = {0x00, 0x11, 0x22, 0x33};
    std::array<uint8_t,4> word_expected = {0x11, 0x22, 0x33, 0x00};
    Key::RotWord(&word);

    EXPECT_EQ(word, word_expected);
}


/*---------------SubWord test---------------*/
TEST(KeyTest, SBoxSubstitutionTest) {

    std::array<uint8_t,10> bytesToTest =           {0x3F, 0xA2, 0x7C, 0xE1, 0x59, 0x08, 0xD4, 0xBE, 0x1A, 0x90};
    std::array<uint8_t,10> expectedSubstitutions = {0x75, 0x3A, 0x10, 0xF8, 0xCB, 0x30, 0x48, 0xAE, 0xA2, 0x60};

    for(int i = 0; i < bytesToTest.size(); i+=1) {
        EXPECT_EQ(Key::SBoxSubstitution(bytesToTest[i]), expectedSubstitutions[i]);
    }

}

TEST(KeyTest, SubWordTest) {

    std::array< std::array<uint8_t,4>,2> wordsToTest = {{  {{0x3F, 0xA2, 0x7C, 0xE1}}, {{ 0x59, 0x08, 0xD4, 0xBE}} }};
    std::array< std::array<uint8_t,4>,2> wordsExpected = {{ {{0x75, 0x3A, 0x10, 0xF8}}, {{0xCB, 0x30, 0x48, 0xAE}} }};

    for(int i = 0; i < wordsToTest.size(); i+=1) {
        Key::SubWord(&wordsToTest[i]);
        EXPECT_EQ(wordsToTest[i], wordsExpected[i]);
    }

}

/*---------------Expasion test---------------*/

TEST(KeyTest, ExpansionTest128) {

    Key key("9f3c7e1a54b82d6e0c1f4a9b3d6e7c1f");
    std::vector<std::array<uint8_t,4>> expectedKeys = {{
        {{0x9F, 0x3C, 0x7E, 0x1A}}, {{0x54, 0xB8, 0x2D, 0x6E}}, {{0x0C, 0x1F, 0x4A, 0x9B}}, {{0x3D, 0x6E, 0x7C, 0x1F}}, {{0x01, 0x2C, 0xBE, 0x3D}},
        {{0x55, 0x94, 0x93, 0x53}}, {{0x59, 0x8B, 0xD9, 0xC8}}, {{0x64, 0xE5, 0xA5, 0xD7}}, {{0xDA, 0x2A, 0xB0, 0x7E}}, {{0x8F, 0xBE, 0x23, 0x2D}},
        {{0xD6, 0x35, 0xFA, 0xE5}}, {{0xB2, 0xD0, 0x5F, 0x32}}, {{0xAE, 0xE5, 0x93, 0x49}}, {{0x21, 0x5B, 0xB0, 0x64}}, {{0xF7, 0x6E, 0x4A, 0x81}},
        {{0x45, 0xBE, 0x15, 0xB3}}, {{0x08, 0xBC, 0xFE, 0x27}}, {{0x29, 0xE7, 0x4E, 0x43}}, {{0xDE, 0x89, 0x04, 0xC2}}, {{0x9B, 0x37, 0x11, 0x71}},
        {{0x82, 0x3E, 0x5D, 0x33}}, {{0xAB, 0xD9, 0x13, 0x70}}, {{0x75, 0x50, 0x17, 0xB2}}, {{0xEE, 0x67, 0x06, 0xC3}}, {{0x27, 0x51, 0x73, 0x1B}},
        {{0x8C, 0x88, 0x60, 0x6B}}, {{0xF9, 0xD8, 0x77, 0xD9}}, {{0x17, 0xBF, 0x71, 0x1A}}, {{0x6F, 0xF2, 0xD1, 0xEB}}, {{0xE3, 0x7A, 0xB1, 0x80}},
        {{0x1A, 0xA2, 0xC6, 0x59}}, {{0x0D, 0x1D, 0xB7, 0x43}}, {{0x4B, 0x5B, 0xCB, 0x3C}}, {{0xA8, 0x21, 0x7A, 0xBC}}, {{0xB2, 0x83, 0xBC, 0xE5}},
        {{0xBF, 0x9E, 0x0B, 0xA6}}, {{0x5B, 0x70, 0xEF, 0x34}}, {{0xF3, 0x51, 0x95, 0x88}}, {{0x41, 0xD2, 0x29, 0x6D}}, {{0xFE, 0x4C, 0x22, 0xCB}},
        {{0x44, 0xE3, 0xF0, 0x8F}}, {{0xB7, 0xB2, 0x65, 0x07}}, {{0xF6, 0x60, 0x4C, 0x6A}}, {{0x08, 0x2C, 0x6E, 0xA1}}
    }};

    key.splitKey();
    key.KeyExpansion();

    EXPECT_EQ(key.getRoundKeysWords(), expectedKeys);

}

TEST(KeyTest, ExpansionTest192) {

    Key key("00112233445566778899aabbccddeeff1122334455667788");
    std::vector<std::array<uint8_t,4>> expectedKeys = {{
        {{0x00, 0x11, 0x22, 0x33}}, {{0x44, 0x55, 0x66, 0x77}}, {{0x88, 0x99, 0xAA, 0xBB}}, {{0xCC, 0xDD, 0xEE, 0xFF}}, {{0x11, 0x22, 0x33, 0x44}},
        {{0x55, 0x66, 0x77, 0x88}}, {{0x32, 0xE4, 0xE6, 0xCF}}, {{0x76, 0xB1, 0x80, 0xB8}}, {{0xFE, 0x28, 0x2A, 0x03}}, {{0x32, 0xF5, 0xC4, 0xFC}},
        {{0x23, 0xD7, 0xF7, 0xB8}}, {{0x76, 0xB1, 0x80, 0x30}}, {{0xF8, 0x29, 0xE2, 0xF7}}, {{0x8E, 0x98, 0x62, 0x4F}}, {{0x70, 0xB0, 0x48, 0x4C}},
        {{0x42, 0x45, 0x8C, 0xB0}}, {{0x61, 0x92, 0x7B, 0x08}}, {{0x17, 0x23, 0xFB, 0x38}}, {{0xDA, 0x26, 0xE5, 0x07}}, {{0x54, 0xBE, 0x87, 0x48}},
        {{0x24, 0x0E, 0xCF, 0x04}}, {{0x66, 0x4B, 0x43, 0xB4}}, {{0x07, 0xD9, 0x38, 0xBC}}, {{0x10, 0xFA, 0xC3, 0x84}}, {{0xFF, 0x08, 0xBA, 0xCD}},
        {{0xAB, 0xB6, 0x3D, 0x85}}, {{0x8F, 0xB8, 0xF2, 0x81}}, {{0xE9, 0xF3, 0xB1, 0x35}}, {{0xEE, 0x2A, 0x89, 0x89}}, {{0xFE, 0xD0, 0x4A, 0x0D}},
        {{0x9F, 0xDE, 0x6D, 0x76}}, {{0x34, 0x68, 0x50, 0xF3}}, {{0xBB, 0xD0, 0xA2, 0x72}}, {{0x52, 0x23, 0x13, 0x47}}, {{0xBC, 0x09, 0x9A, 0xCE}},
        {{0x42, 0xD9, 0xD0, 0xC3}}, {{0x8A, 0xAE, 0x43, 0x5A}}, {{0xBE, 0xC6, 0x13, 0xA9}}, {{0x05, 0x16, 0xB1, 0xDB}}, {{0x57, 0x35, 0xA2, 0x9C}},
        {{0xEB, 0x3C, 0x38, 0x52}}, {{0xA9, 0xE5, 0xE8, 0x91}}, {{0x13, 0x35, 0xC2, 0x89}}, {{0xAD, 0xF3, 0xD1, 0x20}}, {{0xA8, 0xE5, 0x60, 0xFB}},
        {{0xFF, 0xD0, 0xC2, 0x67}}, {{0x14, 0xEC, 0xFA, 0x35}}, {{0xBD, 0x09, 0x12, 0xA4}}, {{0x92, 0xFC, 0x8B, 0xF3}}, {{0x3F, 0x0F, 0x5A, 0xD3}},
        {{0x97, 0xEA, 0x3A, 0x28}}, {{0x68, 0x3A, 0xF8, 0x4F}}
    }};

    key.splitKey();
    key.KeyExpansion();

    EXPECT_EQ(key.getRoundKeysWords(), expectedKeys);

}

TEST(KeyTest, ExpansionTest256) {

    Key key("9F7C4B18E23D506A7A2C3DB11E8B6C47D492F5A1CC8E3021B37FA94E51DC68AF");
    std::vector<std::array<uint8_t,4>> expectedKeys = {{
        {{0x9F, 0x7C, 0x4B, 0x18}}, {{0xE2, 0x3D, 0x50, 0x6A}}, {{0x7A, 0x2C, 0x3D, 0xB1}}, {{0x1E, 0x8B, 0x6C, 0x47}}, {{0xD4, 0x92, 0xF5, 0xA1}},
        {{0xCC, 0x8E, 0x30, 0x21}}, {{0xB3, 0x7F, 0xA9, 0x4E}}, {{0x51, 0xDC, 0x68, 0xAF}}, {{0x18, 0x39, 0x32, 0xC9}}, {{0xFA, 0x04, 0x62, 0xA3}},
        {{0x80, 0x28, 0x5F, 0x12}}, {{0x9E, 0xA3, 0x33, 0x55}}, {{0xDF, 0x98, 0x36, 0x5D}}, {{0x13, 0x16, 0x06, 0x7C}}, {{0xA0, 0x69, 0xAF, 0x32}},
        {{0xF1, 0xB5, 0xC7, 0x9D}}, {{0xCF, 0xFF, 0x6C, 0x68}}, {{0x35, 0xFB, 0x0E, 0xCB}}, {{0xB5, 0xD3, 0x51, 0xD9}}, {{0x2B, 0x70, 0x62, 0x8C}},
        {{0x2E, 0xC9, 0x9C, 0x39}}, {{0x3D, 0xDF, 0x9A, 0x45}}, {{0x9D, 0xB6, 0x35, 0x77}}, {{0x6C, 0x03, 0xF2, 0xEA}}, {{0xB0, 0x76, 0xEB, 0x38}},
        {{0x85, 0x8D, 0xE5, 0xF3}}, {{0x30, 0x5E, 0xB4, 0x2A}}, {{0x1B, 0x2E, 0xD6, 0xA6}}, {{0x81, 0xF8, 0x6A, 0x1D}}, {{0xBC, 0x27, 0xF0, 0x58}},
        {{0x21, 0x91, 0xC5, 0x2F}}, {{0x4D, 0x92, 0x37, 0xC5}}, {{0xF7, 0xEC, 0x4D, 0xDB}}, {{0x72, 0x61, 0xA8, 0x28}}, {{0x42, 0x3F, 0x1C, 0x02}},
        {{0x59, 0x11, 0xCA, 0xA4}}, {{0x4A, 0x7A, 0x1E, 0x54}}, {{0xF6, 0x5D, 0xEE, 0x0C}}, {{0xD7, 0xCC, 0x2B, 0x23}}, {{0x9A, 0x5E, 0x1C, 0xE6}},
        {{0xBF, 0x70, 0xC3, 0x63}}, {{0xCD, 0x11, 0x6B, 0x4B}}, {{0x8F, 0x2E, 0x77, 0x49}}, {{0xD6, 0x3F, 0xBD, 0xED}}, {{0xBC, 0x0F, 0x64, 0x01}},
        {{0x4A, 0x52, 0x8A, 0x0D}}, {{0x9D, 0x9E, 0xA1, 0x2E}}, {{0x07, 0xC0, 0xBD, 0xC8}}, {{0x25, 0x0A, 0x2B, 0xA6}}, {{0xE8, 0x1B, 0x40, 0xED}},
        {{0x67, 0x35, 0x37, 0xA4}}, {{0xB1, 0x0A, 0x8A, 0x49}}, {{0x74, 0x68, 0x1A, 0x3A}}, {{0x3E, 0x3A, 0x90, 0x37}}, {{0xA3, 0xA4, 0x31, 0x19}},
        {{0xA4, 0x64, 0x8C, 0xD1}}, {{0x26, 0x6E, 0x15, 0xEF}}, {{0xCE, 0x75, 0x55, 0x02}}, {{0xA9, 0x40, 0x62, 0xA6}}, {{0x18, 0x4A, 0xE8, 0xEF}}
    }};

    key.splitKey();
    key.KeyExpansion();

    EXPECT_EQ(key.getRoundKeysWords(), expectedKeys);

}

TEST(KeyTest, AddRoundKeyTest) {

    Key key("9f3c7e1a54b82d6e0c1f4a9b3d6e7c1f");
    std::array< std::array<uint8_t,4>,4> test = {{
        {{0x00, 0x00, 0x01, 0x01}}, 
        {{0x03, 0x03, 0x07, 0x07}}, 
        {{0x0f, 0x0f, 0x1f, 0x1f}}, 
        {{0x3f, 0x3f, 0x7f, 0x7f}}  
    }};

    std::array<std::array<uint8_t, 4>, 4> expectedXored = {{
        {{0x9f, 0x3c, 0x7f, 0x1b}}, 
        {{0x57, 0xbb, 0x2a, 0x69}}, 
        {{0x03, 0x10, 0x55, 0x84}}, 
        {{0x02, 0x51, 0x03, 0x60}}  
    }};
    

    key.splitKey();
    key.KeyExpansion();
    key.AddRoundKey(&test, 0);

    EXPECT_EQ(test, expectedXored);

}

TEST(KeyTest, SubBytesTest) {

    Key key("9f3c7e1a54b82d6e0c1f4a9b3d6e7c1f");
    std::array< std::array<uint8_t,4>,4> test = {{
        {{0x00, 0x00, 0x01, 0x01}}, 
        {{0x03, 0x03, 0x07, 0x07}}, 
        {{0x0f, 0x0f, 0x1f, 0x1f}}, 
        {{0x3f, 0x3f, 0x7f, 0x7f}}  
    }};

    std::array<std::array<uint8_t, 4>, 4> expectedSubbed =  {{
        {{0xdb, 0xeb, 0xd2, 0xaf}}, 
        {{0x5b, 0xea, 0xe5, 0xf9}},
        {{0x7b, 0xca, 0xfc, 0x5f}},
        {{0x77, 0xd1, 0x7b, 0xd0}}  
    }};
    

    key.splitKey();
    key.KeyExpansion();
    key.AddRoundKey(&test, 0);
    key.SubBytes(&test);

    EXPECT_EQ(test, expectedSubbed);

}