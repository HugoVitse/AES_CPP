// Script d'audit : peut générer un fichier d'octets aléatoires puis le chiffrer.
// Usage:
//   node audit.js [inputPath] [outputPath] [--gen-size=BYTES]
// Exemple:
//   node audit.js tests/audit/test_rand.bin tests/audit/test_rand.bin.enc --gen-size=1024
// Si --gen-size est fourni et > 0, le script écrira un fichier d'octets aléatoires
// de cette taille à `inputPath` avant de le chiffrer.
var CryptoJS = require("crypto-js");
var fs = require('fs');
var crypto = require('crypto');

var key = CryptoJS.enc.Hex.parse("19af00f22368200dd52e17b21f02f782");
var iv = CryptoJS.enc.Hex.parse("60d271cf6d949194e2ab66347b286ddf");
// chemins — modifiez selon vos besoins ou utilisez process.argv[2]/[3]
var inputPath = process.argv[2] || '../../test2.txt';
var outputPath = process.argv[3] || '../../test2.txt.enc';

// optionnel: générer un fichier d'octets aléatoires avant chiffrement
// usage: node audit.js [inputPath] [outputPath] [--gen-size=BYTES]
var genSizeArg = null;
for (var i = 0; i < process.argv.length; i++) {
    var a = process.argv[i];
    if (a && a.indexOf('--gen-size=') === 0) {
        genSizeArg = parseInt(a.split('=')[1], 10);
        if (isNaN(genSizeArg) || genSizeArg < 0) genSizeArg = null;
    }
}

if (genSizeArg) {
    // créer un buffer d'octets aléatoires et l'écrire sur inputPath
    var randBuf = crypto.randomBytes(genSizeArg);
    fs.writeFileSync(inputPath, randBuf);
    console.log('Generated random file', inputPath, 'size', genSizeArg);
}

// lire le fichier en Buffer
var inputBuf = fs.readFileSync(inputPath);

// convertir Buffer en CryptoJS WordArray
function bufferToWordArray(buf) {
    var words = [], i = 0, len = buf.length;
    while (i < len) {
        words.push(
            ((buf[i    ] << 24) | ((buf[i+1]||0) << 16) | ((buf[i+2]||0) << 8) | (buf[i+3]||0)) >>> 0
        );
        i += 4;
    }
    return CryptoJS.lib.WordArray.create(words, len);
}

var wordArray = bufferToWordArray(inputBuf);

// chiffrer le contenu du fichier
var encrypted = CryptoJS.AES.encrypt(wordArray, key, {
    iv: iv,
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.Pkcs7
});

// convertir CryptoJS WordArray en Buffer Node.js
function wordArrayToBuffer(wordArray) {
    var words = wordArray.words;
    var sigBytes = wordArray.sigBytes;
    var buf = Buffer.alloc(sigBytes);
    for (var i = 0; i < sigBytes; i++) {
        var word = words[i >>> 2];
        buf[i] = (word >>> (24 - (i % 4) * 8)) & 0xFF;
    }
    return buf;
}

// obtenir le ciphertext (WordArray) et l'écrire en octets bruts
var ciphertextWA = encrypted.ciphertext;
var ciphertextBuf = wordArrayToBuffer(ciphertextWA);
fs.writeFileSync(outputPath, ciphertextBuf);

console.log(encrypted.toString()); // résultat en base64